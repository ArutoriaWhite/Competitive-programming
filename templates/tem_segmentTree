#include <algorithm>
using namespace std;

struct Node
{
	bool isLeaf;
	int val;
	int r, l;
	Node *rightNode, *leftNode,*root;
private:
	int ans;
	int merge(int v1, int v2) { return(min(v1, v2)); }
	int merge(Node *n1, Node *n2) { return (merge(n1->val, n2->val)); }

	Node(int l, int r, Node *rt) {
		this->root = rt;
		if (l == r) {
			this->isLeaf = true;
			return;
		}
		this->l = l; this->r = r;
		int m = (l + r) >> 1;
		this->rightNode = &Node(l, m, root);
		this->leftNode = &Node(m + 1, r, root);
		this->val = merge(rightNode, leftNode);
	}

public:
	void Update(Node* n, int i, int val) {
		if (n->isLeaf) n->val = val;
		else
		{
			int m = (n->r + n->l) >> 1;
			if (i <= m) Update(n, i, val);
			else Update(n, i, val);
		}

	}
	int serching(Node *root,int l,int r){
		if (root->isLeaf) return root->val;
		else {
			int m = (l + r) >> 1;
			if (r <= m) return serching(root,l, r);
			else if (l > m) return serching(root, l, r);
			else {
				return merge(serching(root, l, m), serching(root, m + 1, r));
			}
		}
	}

};
